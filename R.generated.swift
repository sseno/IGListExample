//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `BluePrimary`.
    static let bluePrimary = Rswift.ColorResource(bundle: R.hostingBundle, name: "BluePrimary")
    
    /// `UIColor(named: "BluePrimary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func bluePrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.bluePrimary, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 8 images.
  struct image {
    /// Image `ic_back_arrow`.
    static let ic_back_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_arrow")
    /// Image `ic_hamburger_white`.
    static let ic_hamburger_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_hamburger_white")
    /// Image `ic_user_placeholder`.
    static let ic_user_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user_placeholder")
    /// Image `img_covid1`.
    static let img_covid1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_covid1")
    /// Image `img_covid2`.
    static let img_covid2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_covid2")
    /// Image `img_covid3`.
    static let img_covid3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_covid3")
    /// Image `img_covid4`.
    static let img_covid4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_covid4")
    /// Image `img_covid5`.
    static let img_covid5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_covid5")
    
    /// `UIImage(named: "ic_back_arrow", bundle: ..., traitCollection: ...)`
    static func ic_back_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_hamburger_white", bundle: ..., traitCollection: ...)`
    static func ic_hamburger_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_hamburger_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_user_placeholder", bundle: ..., traitCollection: ...)`
    static func ic_user_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user_placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_covid1", bundle: ..., traitCollection: ...)`
    static func img_covid1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_covid1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_covid2", bundle: ..., traitCollection: ...)`
    static func img_covid2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_covid2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_covid3", bundle: ..., traitCollection: ...)`
    static func img_covid3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_covid3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_covid4", bundle: ..., traitCollection: ...)`
    static func img_covid4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_covid4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_covid5", bundle: ..., traitCollection: ...)`
    static func img_covid5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_covid5, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    /// Nib `HomeNewsCell`.
    static let homeNewsCell = _R.nib._HomeNewsCell()
    /// Nib `HomeNewsItemCell`.
    static let homeNewsItemCell = _R.nib._HomeNewsItemCell()
    /// Nib `HomePreventCovidCell`.
    static let homePreventCovidCell = _R.nib._HomePreventCovidCell()
    /// Nib `HomePreventCovidItemCell`.
    static let homePreventCovidItemCell = _R.nib._HomePreventCovidItemCell()
    /// Nib `HomeRequirementItemCell`.
    static let homeRequirementItemCell = _R.nib._HomeRequirementItemCell()
    /// Nib `HomeRequirementsCell`.
    static let homeRequirementsCell = _R.nib._HomeRequirementsCell()
    /// Nib `HomeViewController`.
    static let homeViewController = _R.nib._HomeViewController()
    /// Nib `NewsDetailHeaderCell`.
    static let newsDetailHeaderCell = _R.nib._NewsDetailHeaderCell()
    
    /// `UINib(name: "HomeNewsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeNewsCell) instead")
    static func homeNewsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeNewsCell)
    }
    
    /// `UINib(name: "HomeNewsItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeNewsItemCell) instead")
    static func homeNewsItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeNewsItemCell)
    }
    
    /// `UINib(name: "HomePreventCovidCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homePreventCovidCell) instead")
    static func homePreventCovidCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homePreventCovidCell)
    }
    
    /// `UINib(name: "HomePreventCovidItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homePreventCovidItemCell) instead")
    static func homePreventCovidItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homePreventCovidItemCell)
    }
    
    /// `UINib(name: "HomeRequirementItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeRequirementItemCell) instead")
    static func homeRequirementItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeRequirementItemCell)
    }
    
    /// `UINib(name: "HomeRequirementsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeRequirementsCell) instead")
    static func homeRequirementsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeRequirementsCell)
    }
    
    /// `UINib(name: "HomeViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeViewController) instead")
    static func homeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeViewController)
    }
    
    /// `UINib(name: "NewsDetailHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.newsDetailHeaderCell) instead")
    static func newsDetailHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newsDetailHeaderCell)
    }
    
    static func homeNewsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeNewsCell? {
      return R.nib.homeNewsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeNewsCell
    }
    
    static func homeNewsItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeNewsItemCell? {
      return R.nib.homeNewsItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeNewsItemCell
    }
    
    static func homePreventCovidCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomePreventCovidCell? {
      return R.nib.homePreventCovidCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomePreventCovidCell
    }
    
    static func homePreventCovidItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomePreventCovidItemCell? {
      return R.nib.homePreventCovidItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomePreventCovidItemCell
    }
    
    static func homeRequirementItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeRequirementItemCell? {
      return R.nib.homeRequirementItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeRequirementItemCell
    }
    
    static func homeRequirementsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeRequirementsCell? {
      return R.nib.homeRequirementsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeRequirementsCell
    }
    
    static func homeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func newsDetailHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewsDetailHeaderCell? {
      return R.nib.newsDetailHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsDetailHeaderCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _HomeNewsItemCell.validate()
    }
    
    struct _HomeNewsCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeNewsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeNewsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeNewsCell
      }
      
      fileprivate init() {}
    }
    
    struct _HomeNewsItemCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeNewsItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeNewsItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeNewsItemCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "img_covid1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_covid1' is used in nib 'HomeNewsItemCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _HomePreventCovidCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomePreventCovidCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomePreventCovidCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomePreventCovidCell
      }
      
      fileprivate init() {}
    }
    
    struct _HomePreventCovidItemCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomePreventCovidItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomePreventCovidItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomePreventCovidItemCell
      }
      
      fileprivate init() {}
    }
    
    struct _HomeRequirementItemCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeRequirementItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeRequirementItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeRequirementItemCell
      }
      
      fileprivate init() {}
    }
    
    struct _HomeRequirementsCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeRequirementsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeRequirementsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeRequirementsCell
      }
      
      fileprivate init() {}
    }
    
    struct _HomeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _NewsDetailHeaderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NewsDetailHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewsDetailHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsDetailHeaderCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
